#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size;
    int value, max_val, min_val, sum_val, prod_val;
    int all_max_val, all_min_val, all_sum_val, all_prod_val;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    value = rank + 1;

    MPI_Reduce(&value, &max_val, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
    MPI_Reduce(&value, &min_val, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    MPI_Reduce(&value, &sum_val, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(&value, &prod_val, 1, MPI_INT, MPI_PROD, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("\nMPI_Reduce results on root process (rank 0):\n");
        printf("  MAX  = %d\n", max_val);
        printf("  MIN  = %d\n", min_val);
        printf("  SUM  = %d\n", sum_val);
        printf("  PROD = %d\n", prod_val);
    }

    MPI_Allreduce(&value, &all_max_val, 1, MPI_INT, MPI_MAX, MPI_COMM_WORLD);
    MPI_Allreduce(&value, &all_min_val, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);
    MPI_Allreduce(&value, &all_sum_val, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
    MPI_Allreduce(&value, &all_prod_val, 1, MPI_INT, MPI_PROD, MPI_COMM_WORLD);

    printf("\nRank %d - MPI_Allreduce results:\n", rank);
    printf("  MAX  = %d\n", all_max_val);
    printf("  MIN  = %d\n", all_min_val);
    printf("  SUM  = %d\n", all_sum_val);
    printf("  PROD = %d\n", all_prod_val);

    MPI_Finalize();
    return 0;
}
